use etebase::{
    User,
    Client,
    Account,

    Collection,
    Item,

    error::Result,
    managers::{
        CollectionManager,
        ItemManager,
    },
};

use crate::{
    Response,
    HttpClient,
    client_new_with_impl,

    FetchOptions,
};

#[cfg(feature = "java")]
use crate::jni_c_header::*;

#[cfg(feature = "android")]
use jni_sys::*;

fn response_reset_ok(resp: &mut Response, bytes: &[u8], status: u16) {
    resp.reset_ok(bytes.to_vec(), status);
}

foreign_class!(class Response {
    self_type Response;
    private constructor = empty;
    fn response_reset_ok(&mut self, bytes: &[u8], status: u16); alias reset_ok;
    fn Response::reset_err(&mut self, err: String);
});

foreign_callback!(callback HttpClient {
    self_type HttpClient;
    get = HttpClient::get(&self, url: &str, auth_token: &str, response: Response);
    post = HttpClient::post(&self, url: &str, auth_token: &str, body: Vec<u8>, response: Response);
    put = HttpClient::put(&self, url: &str, auth_token: &str, body: Vec<u8>, response: Response);
    patch = HttpClient::patch(&self, url: &str, auth_token: &str, body: Vec<u8>, response: Response);
    del = HttpClient::delete(&self, url: &str, auth_token: &str, response: Response);
});

foreign_class!(class Client {
    self_type Client;
    private constructor = empty;
    fn client_new_with_impl(server_url: &str, imp: Box<HttpClient>) -> Result<Client>;
    fn Client::set_api_base(&mut self, server_url: &str) -> Result<()>; alias setApiBase;
    foreign_code r#"
    public static Client create(okhttp3.OkHttpClient client, String server_url) {
        return com.etebase.client.http_bridge.HttpClientBridge.create(client, server_url);
    }

    static {
        System.loadLibrary("etebase_android");
    }
"#;
});

foreign_class!(class User {
    self_type User;
    private constructor = empty;
});

foreign_class!(class Account {
    self_type Account;
    private constructor = empty;
    fn Account::login(client: Client, username: &str, password: &str) -> Result<Account>;
    fn Account::signup(client: Client, user: &User, password: &str) -> Result<Account>;
    fn Account::fetch_token(&mut self) -> Result<()>; alias fetchToken;
    fn Account::force_api_base(&mut self, api_base: &str) -> Result<()>; alias forceApiBase;
    fn Account::change_password(&mut self, password: &str) -> Result<()>; alias changePassword;
    fn Account::logout(&mut self) -> Result<()>;
    fn Account::collection_manager(&self) -> Result<CollectionManager>; alias getCollectionManager;
});

type CollectionListResponse = etebase::CollectionListResponse<Collection>;

foreign_class!(class CollectionListResponse {
    self_type CollectionListResponse;
    private constructor = empty;
    fn CollectionListResponse::stoken(&self) -> Option<&str>; alias getStoken;
    fn CollectionListResponse::data(&self) -> &Vec<Collection>; alias getData;
    fn CollectionListResponse::done(&self) -> bool; alias getDone;
});

type ItemListResponse = etebase::ItemListResponse<Item>;

foreign_class!(class ItemListResponse {
    self_type ItemListResponse;
    private constructor = empty;
    fn ItemListResponse::stoken(&self) -> Option<&str>; alias getStoken;
    fn ItemListResponse::data(&self) -> &Vec<Item>; alias getData;
    fn ItemListResponse::done(&self) -> bool; alias getDone;
});

foreign_class!(class FetchOptions {
    self_type FetchOptions;
    constructor FetchOptions::new() -> FetchOptions;
    fn FetchOptions::limit(&mut self, limit: usize);
    fn FetchOptions::prefetch(&mut self, prefetch: bool);
    fn FetchOptions::with_collection(&mut self, with_collection: bool);
    fn FetchOptions::iterator(&mut self, iterator: Option<&str>);
    fn FetchOptions::stoken(&mut self, stoken: Option<&str>);
});

pub fn col_fetch(mgr: &CollectionManager, col_uid: &str, fetch_options: Option<&FetchOptions>) -> Result<Collection> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.fetch(col_uid, fetch_options.as_ref())
}

// FIXME: support metadata!
pub fn col_create(mgr: &CollectionManager, content: &[u8]) -> Result<Collection> {
    mgr.create(&etebase::CollectionMetadata::new("type", "name"), content)
}

pub fn col_list(mgr: &CollectionManager, fetch_options: Option<&FetchOptions>) -> Result<CollectionListResponse> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.list(fetch_options.as_ref())
}

pub fn col_upload(mgr: &CollectionManager, collection: &Collection, fetch_options: Option<&FetchOptions>) -> Result<()> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.upload(collection, fetch_options.as_ref())
}

pub fn col_transaction(mgr: &CollectionManager, collection: &Collection, fetch_options: Option<&FetchOptions>) -> Result<()> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.transaction(collection, fetch_options.as_ref())
}

foreign_class!(class CollectionManager {
    self_type CollectionManager;
    private constructor = empty;
    fn col_fetch(&self, col_uid: &str, fetch_options: Option<&FetchOptions>) -> Result<Collection>; alias fetch;
    fn col_create(&self, content: &[u8]) -> Result<Collection>; alias create;
    fn CollectionManager::item_manager(&self, col: &Collection) -> Result<ItemManager>; alias getItemManager;
    fn col_list(&self, fetch_options: Option<&FetchOptions>) -> Result<CollectionListResponse>; alias list;
    fn col_upload(&self, collection: &Collection, fetch_options: Option<&FetchOptions>) -> Result<()>; alias upload;
    fn col_transaction(&self, collection: &Collection, fetch_options: Option<&FetchOptions>) -> Result<()>; alias transaction;
});

pub fn item_fetch(mgr: &ItemManager, item_uid: &str, fetch_options: Option<&FetchOptions>) -> Result<Item> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.fetch(item_uid, fetch_options.as_ref())
}

// FIXME: support metadata!
pub fn item_create(mgr: &ItemManager, content: &[u8]) -> Result<Item> {
    mgr.create(&etebase::ItemMetadata::new(), content)
}

pub fn item_list(mgr: &ItemManager, fetch_options: Option<&FetchOptions>) -> Result<ItemListResponse> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.list(fetch_options.as_ref())
}

pub fn item_fetch_updates(mgr: &ItemManager, items: Vec<&Item>, fetch_options: Option<&FetchOptions>) -> Result<ItemListResponse> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.fetch_updates(items.into_iter(), fetch_options.as_ref())
}

// FIXME: make deps an option?
pub fn item_batch(mgr: &ItemManager, items: Vec<&Item>, deps: Vec<&Item>, fetch_options: Option<&FetchOptions>) -> Result<()> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.batch_deps(items.into_iter(), deps.into_iter(), fetch_options.as_ref())
}

pub fn item_transaction(mgr: &ItemManager, items: Vec<&Item>, deps: Vec<&Item>, fetch_options: Option<&FetchOptions>) -> Result<()> {
    let fetch_options = fetch_options.map(|x| x.to_fetch_options());
    mgr.transaction_deps(items.into_iter(), deps.into_iter(), fetch_options.as_ref())
}

foreign_class!(class ItemManager {
    self_type ItemManager;
    private constructor = empty;
    fn item_fetch(&self, item_uid: &str, fetch_options: Option<&FetchOptions>) -> Result<Item>; alias fetch;
    fn item_create(&self, content: &[u8]) -> Result<Item>; alias create;
    fn item_list(&self, fetch_options: Option<&FetchOptions>) -> Result<ItemListResponse>; alias list;
    fn item_fetch_updates(&self, items: Vec<&Item>, fetch_options: Option<&FetchOptions>) -> Result<ItemListResponse>; alias fetchUpdates;
    fn item_batch(&self, items: Vec<&Item>, deps: Vec<&Item>, fetch_options: Option<&FetchOptions>) -> Result<()>; alias batch;
    fn item_transaction(&self, items: Vec<&Item>, deps: Vec<&Item>, fetch_options: Option<&FetchOptions>) -> Result<()>; alias transaction;
});

pub fn col_verify(col: &Collection) -> bool {
    col.verify().unwrap_or(false)
}

foreign_class!(class Collection {
    self_type Collection;
    private constructor = empty;
    fn col_verify(&self) -> bool; alias verify;

    // FIXME fn Collection::set_meta<T: MsgPackSerilization>(&mut self, meta: &T) -> Result<()>;
    // FIXME fn Collection::decrypt_meta(&self) -> Result<CollectionMetadata>;
    // FIXME Figure out how to support generic:
    // fn Collection::decrypt_meta_generic<T: MsgPackSerilization>(&self) -> Result<T::Output>;
    fn Collection::set_content(&mut self, content: &[u8]) -> Result<()>; alias setContent;
    fn Collection::decrypt_content(&self) -> Result<Vec<u8>>; alias getContent;
    fn Collection::delete(&mut self) -> Result<()>; alias markDeleted;
    fn Collection::is_deleted(&self) -> bool; alias isDeleted;
    fn Collection::uid(&self) -> &str; alias getUid;
    fn Collection::etag_owned(&self) -> Option<String>; alias getEtag;
    fn Collection::stoken(&self) -> Option<&str>; alias getStoken;
    fn Collection::item(&self) -> Result<Item>; alias asItem;
});

pub fn item_verify(item: &Item) -> bool {
    item.verify().unwrap_or(false)
}

foreign_class!(class Item {
    self_type Item;
    private constructor = empty;
    fn item_verify(&self) -> bool; alias verify;

    // FIXME fn Item::set_meta<T: MsgPackSerilization>(&mut self, meta: &T) -> Result<()>;
    // FIXME fn Item::decrypt_meta(&self) -> Result<ItemMetadata>;
    // FIXME Figure out how to support generic:
    // fn Item::decrypt_meta_generic<T: MsgPackSerilization>(&self) -> Result<T::Output>;
    fn Item::set_content(&mut self, content: &[u8]) -> Result<()>; alias setContent;
    fn Item::decrypt_content(&self) -> Result<Vec<u8>>; alias getContent;
    fn Item::delete(&mut self) -> Result<()>; alias markDeleted;
    fn Item::is_deleted(&self) -> bool; alias isDeleted;
    fn Item::uid(&self) -> &str; alias getUid;
    fn Item::etag_owned(&self) -> Option<String>; alias getEtag;
});
